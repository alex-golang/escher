
// Before running this program, make sure that the "docker" command is operational 
// and connected to a docker image server.

main {
	buildImage BuildImage
	buildImage.When = 0

	configImage ConfigureImage
	configImage.When = buildImage._

	yexit os.ForkExit
	yexit._ = configImage._
	ignoreWhen Ignore
	yexit.When = ignoreWhen._

	exit os.Exit
	exit._ = yexit.Exit
}

ConfigureImage { // (When, _)
	_ = inscript._ // TODO: Finish this circuit
	inscript = `#!/bin/sh
rails new . --force --database=postgresql --skip-bundle && \
sed "s/# gem 'therubyracer'/gem 'therubyracer'/" < Gemfile > Gemfile2 && \
rm Gemfile
mv Gemfile2 Gemfile
cp database.yml.genus config/database.yml
`
}

BuildImage { // (When, _)
	build os.ProcessRun

	cmd os.ForkCommand
	build.Command = cmd._

	cmd.Path = look._
	look os.LookPath
	look.Name = "docker"

	dir path.Join
	cmd.Dir = dir._

	home escher.CircuitDesignDir
	dir.Head = home._
	dir.Tail = "Dockerfile"

	cmd.Env = {}
	cmd.Args = {
		"build" // Build a Docker image
		"--tag" // Apply a tag to the resulting image
		"chooyu_app" // Tag name in Docker server repo for the resulting image
		"." // Working directory has Dockerfile
	}

	build.When = When
	_ = build.Exit
}
