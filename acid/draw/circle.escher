
Circle {
	circle CircleWrite
	circle: = :
	circle:View = :View
	circle:WriteTo = use.Output // use.Output should be planted by the materializer
}

CircleWrite { // : :View :WriteTo
	lens Lens

	j Star
	j: = lens:X
	lens:Y = :View
	j:0 = oneway:View
	j:1 = show:X

	oneway basic.OneWay
	oneway: = :
	oneway:Strobe = show:Y

	show Show

	:WriteTo = Ignore
}


CircleWriteFull { // : :View :WriteTo
	:WriteTo = form:

	form text.ForkFormWithDone
	form:When = rad:Theta
	form:Form = `
	<circle cx="{{.Gate.X}}" cy="{{.Gate.Y}}" r="{{.Gate.R}}" fill="rgba(0, 0, 0, 0.5)" />`
	form:Data = data:

	data Fork
	data:R = rad:R
	data:X = planar:X
	data:Y = planar:Y
	lens Lens

	planar Fork
	planar: = cp:Planar

	cp cmplx.Planar
	cp:Complex = pos:

	pos view.QuickFocus
	pos:Name = "Position"
	pos:Root = j:0

	j Star
	j: = lens:dY
	lens:pY = :View
	j:1 = orient:Root

	ow basic.OneWay
	ow: = :
	ow:Value = j:2
	ow:Strobe = form:Done

	orient view.QuickFocus
	orient:Name = "Orientation"
	orient: = polar:Complex

	polar cmplx.Polar
	polar:Polar = rad:

	rad Fork
}

TestCircleWrite {
	circle CircleWrite
	circle:WriteTo = os.Stdout
	circle:View = {
		Position -1.200000-.400000i
		Orientation -1.200000+3.400000i
	}
	circle: = Show
}
