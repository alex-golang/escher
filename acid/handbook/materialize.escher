
BuildMaterializePage {
        file io.util.WriteFile
        file:Content = MaterializePage
        file:Name = "m.html"
        : = file:Ready
}

MaterializePage {
	h Html
	h: = :
	h:Title = "Materializing circuits into reflexes"
	h:Body = t:

	f Fork
	f:ImgScanPrint = fig:

	fig FigurePngSvg
	fig:Image = "scanprint"
	fig:Caption = `*`

	t Template
	t:Data = f:
	t:Template = `
<h1>Materializing</h1>

<ul>
<li><a href="#expanding">Expanding circuits</a></li>
<li><a href="#reflexes">Reflexes</a></li>
<li><a href="#links">Telescoping links</a></li>
<li><a href="#m">Materializing</a></li>
</ul>

<p><br>

<p>Escher's syntax is intended to facilitate manual codification of small circuits
by a human operator. In typical use cases, like for instance the codification of
datacenter service topologies, the graphs to be described are huge. To facilitate
building such graphs, Escher provides a mechanism for building out large complex
graphs modularly and recursively from smaller circuits.

<h2 id="expanding">Expanding circuits</h2>

<blockquote>
Expanding a source circuit is the process of substituting each address-valued gate
with a value found at the corresponding address within a <em>memory</em>, which is
a hierarchical namespace of values.
</blockquote>

<p>Consider the following input circuit:

<pre class="escher">
Employees {
	Manager gov.Eric
	Engineer Petar
	Project {
		Name "XData"
		Location Arlington
	}
	Manager:Supervises = Engineer:SupervisedBy
}
</pre>

<p>Here the gates <code>Engineer</code> and <code>Manager</code> have address values 
(<code>Petar</code> and <code>gov.Eric</code>, respectively).
Suppose further that circuits named <code>Eric</code> and <code>Petar</code> are
defined within an enclosing circuit <code>Memory</code> like so:

<pre class="escher">
Memory {
	gov {
		Eric {
			First "Eric"
			Last "Whyne"
		}
	}
	Petar {
		First "Petar"
		Last "Maymounkov"
		Home Brooklyn
		First:Lives = Home:
	}
	Brooklyn {
		Address "Brooklyn, NY"
	}
}
</pre>

<p><em>Expanding</em> the circuit <code>Employees</code>,
using the circuit <code>Memory</code> for lookup, is the process of
substituting every address gate value with the
respective value found in <code>Memory</code> at this address.
In our case, the result would be:

<pre class="escher">
Employees {
	Manager {
		First "Eric"
		Last "Whyne"
	}
	Engineer {
		First "Petar"
		Last "Maymounkov"
		Home {
			Address "Brooklyn, NY"
		}
		First:Lives = Home:
	}
	Project {
		Name "XData"
		Location Arlington
	}
	Manager:Supervises = Engineer:SupervisedBy
}
</pre>

<p>Note that circuit links are also copied during expansion. Also note that
the address-valued gate <code>Location</code> in circuit <code>Project</code>
is not expanded, since <code>Project</code> is not the circuit being expandedâ€”<code>Employees</code> is.

<h2 id="links">Reflexes</h2>

<p>

{{.Gate.ImgScanPrint}}

<h2 id="links">Telescoping links</h2>

<p>We would like to use the mechanism of expanding circuits to build
large circuits from smaller ones. Roughly speaking, after expanding
a circuit program recursively, we want to flatten the resulting deep
circuit to get a depth-1 circuit that respects all gate and link structure of the
expanded design.

<p>

<h2 id="m">Materializing</h2>

<p>

        `
}
